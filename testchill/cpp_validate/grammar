<expr> ::=
    <add-expr>:e                                     => e
<add-expr> ::=
    <add-expr>:l '+' <mul-expr>:r                    => _BinExpr(l, '+', r)
    <add-expr>:l '-' <mul-expr>:r                    => _BinExpr(l, '-', r)
    <mul-expr>:e                                     => e
<mul-expr> ::=
    <mul-expr>:l '*' <pow-expr>:r                    => _BinExpr(l, '*', r)
    <mul-expr>:l '/' <pow-expr>:r                    => _BinExpr(l, '/', r)
<pow-expr> ::=
    <pow-expr>:l '**' <un-expr>:r                    => _BinExpr(l, '**', r)
    <un-expr>:e                                      => e
<un-expr> ::=
    '-' <un-expr>:e                                  => _UnaryExpr('-', e)
    <term-expr>:e                                    => e
<term-expr> ::=
    '(' <expr>:e ')'                                 => e
    '[' <expr-list-opt>:l ']'                        => l
    Identifier:name                                  => _NameExpr(name)
    'random' '(' <expr>:mn ',' <expr>:mx ')'         => _RandomExpr(mn, mx)
    'matrix' '(' <dim-list-expr>:d ',' <expr>:e ')'  => _MatrixGenerator(d, e)
    'lambda' <id-list-opt>:params ':' <expr>:e       => _LambdaExpr(params, e)
    <term-expr>:f '(' <expr-list-opt>:l ')'          => _InvokeExpr(f, l)
    <term-expr>:n '.' Identifier:attr                => _AttributeExpr(n, attr)
<expr-list-opt> ::=
    eps                                              => []
    <expr-list>:l                                    => l
<expr-list> ::=
    <expr-list>:l ',' <expr>:e                       => l + [e]
    <expr>:e                                         => [e]
<dim-list-expr> ::=
    '[' <dim-expr-list>:l ']'                        => l
<dim-expr-list> ::=
    <dim-expr-list>:l ',' <dim-expr>:e               => l + [e]
    <dim-expr>:e                                     => [e]
<dim-expr> ::=
    '*'                                              => None
    <expr>:e                                         => e

